/*
 * Declarations that are intended to be overridden, and easily adjustable
 * by users.
 */
.cht-container {
    --cht--color-black: rgba(0, 0, 0, 0.9);
    --cht--color-white: rgba(255, 255, 255, 0.9);
    --cht--color-green-hue: 157;
    --cht--color-orange-hue: 37;
    --cht--color-red-hue: 344;
    --cht--color-link-hue: 49;
    --cht--font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell",
        "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
    --cht--container-fixed-top: 0;
    --cht--container-fixed-bottom: 0;
    --cht--container-z-index: 9999;
}

.cht-container.cht--light-theme {
    --cht-fg: var(--cht--color-black);
    --cht-bg: hsl(53, 25%, 94%);
    --cht-yay: hsl(var(--cht--color-green-hue), 30%, 53%);
    --cht-doh: hsl(var(--cht--color-orange-hue), 100%, 55%);
    --cht-arg: hsl(var(--cht--color-orange-hue), 97%, 64%);
    --cht-link: rgba(var(--cht--color-link-hue), 120, 185, 0.925);
}

.cht-container.cht--dark-theme {
    --cht-fg: var(--cht--color-white);
    --cht-bg: hsl(330, 10%, 23%);
    --cht-yay: hsl(var(--cht--color-green-hue), 30%, 63%);
    --cht-doh: hsl(var(--cht--color-orange-hue), 100%, 65%);
    --cht-arg: hsl(var(--cht--color-red-hue), 84%, 67%);
    --cht-link: rgba(var(--cht--color-link-hue), 121, 187, 0.925);
}

/* Micro reset -------------------------------------------------------------- */

.cht-container {
    box-sizing: border-box;
}
.cht-container *,
.cht-container *::before,
.cht-container *::after {
    box-sizing: inherit;
}

/* Icon styles -------------------------------------------------------------- */

.cht-container .icon-tabler {
    stroke: var(--cht-fg);
}
.cht-container.cht--light-theme .icon-tabler {
    stroke-width: 1.4;
}
.cht-container.cht--dark-theme .icon-tabler {
    stroke-width: 1.6;
}

/* LAYOUT =================================================================== */

/*
 * The main container, wraps **all** elements of the aside-chat, allowing for 
 * a consistent scope for styling. The container will also control the offset
 * and margins, that can be customized. It also defines the width of the chat
 * window.
 */
.cht-container {
    color: var(--cht-fg);
    font-family: var(--cht--font-family);
    top: var(--cht--container-fixed-top);
    bottom: var(--cht--container-fixed-bottom);
    right: 0;
    position: fixed;
    z-index: var(--cht--container-z-index);
    width: 324px; /* DEBUG, TODO: Recover from storage. */
    display: flex;
    flex-direction: row;
}

/*
 * A resize-bar or border, is available for the UI to provide a grabbing
 * element for the mouse. Horizontal resizing can then be performed by the user
 */
.cht-resize {
    padding: 0;
    height: 100%;
    border: none;
    cursor: ew-resize;
    width: .3rem;
    border-left: 1px solid transparent;
    background: var(--cht-bg);
}
.cht-container > .cht-resize:hover {
    border-left-color: var(--cht-link);
}

.cht-minimize {
    display: none;
    border: none;
    background: transparent;
}
.cht-maximize {
    display: none;
}

/*
 * The main chat layout, encapsulating a header, content-area and a footer.
 */
.cht-window {
    flex: 1;
    background: var(--cht-bg);
    display: flex;
    flex-direction: column;
}

.cht-window .cht-header {
    background: var(--cht-bg); /* DEBUG */
}
.cht-window .cht-content {
    flex: 1;
}
.cht-window .cht-footer {
    background: lightblue; /* DEBUG */
}

/*
 * Mobile-first, so we adapt the visual behavior accommodate a larger viewport
 * by `min-width` rules.
 */
@media (min-width: 768px) {
    .cht-toggle {
        display: none;
    }
    /*
    .cht-resize {
        display: block;
    }
    .cht-minimize {
        display: initial;
    }
    .cht-panel {
        display: initial;
    }
    */
}
